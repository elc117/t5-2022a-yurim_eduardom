* Simula e Smalltalk
** Motivação
#+BEGIN_QUOTE
Every language that uses the word 'class' for 'type' is a descendant of Simula, directly or indirectly.
--- Bjarne Stroustrup
#+END_QUOTE
Simula e Smalltalk são consideradas algumas das primeiras linguagens orientadas a objetos. Simula inaugurou os conceitos de classe e de herança, já em Smalltalk, tudo que existe na linguagem são objetos, inclusive if, while e for não são comandos, são métodos. Decidimos estudá-las a fim de perceber de que forma a orientação a objetos evoluiu ao longo do tempo.
** Simula - A linguagem
*** Noções preliminares
#+BEGIN_SRC simula
BEGIN
  COMMENT DECLARACAO DE VARIAVEIS;
  INTEGER A, B;
  REAL X;
  
  COMMENT ATRIBUICAO DE VALOR AAS VARIAVEIS;
  A := 2;
  B := 3;
  
  X := (A + B) * B;

  COMMENT COLOCA X EM UMA ESPECIE DE 'BUFFER';
  OUTFIX(X, 6, 20);

  COMMENT MOSTRA O QUE ESTA NO 'BUFFER';
  OUTIMAGE;
END;
#+END_SRC
*** Estruturas condicionais
#+BEGIN_SRC simula
BEGIN
  INTEGER X, Y;
  BOOLEAN EQUAL, GREATER;

  X := 5;
  Y := X;

  IF X > Y 
    THEN GREATER := 1
      ELSE GREATER := 0;

  OUTFIX(GREATER, 0, 0); 
  OUTIMAGE;
END;
#+END_SRC
*** Estruturas de repetição
**** GOTO
#+BEGIN_SRC simula
BEGIN
  COMMENT AS VARIAVEIS COMECAM ZERADAS;
  INTEGER X, ACC;

  COMMENT OS QUATRO LOOPS FAZEM A MESMA COISA;
ACCUMULATION:
  ACC := ACC + X;
  X := X + 1;
  OUTINT(ACC, 0);
  OUTIMAGE;
  IF X < 11 THEN GOTO ACCUMULATION;

END;
#+END_SRC
**** FOR-STEP-UNTIL-DO
#+BEGIN_SRC simula
BEGIN
  INTEGER X, ACC;

  ACC := 0;
  FOR X := 0 STEP 1 UNTIL 10 DO
  BEGIN
    ACC := ACC + X;
    OUTINT(ACC, 0);
    OUTIMAGE;
  END;

END;
#+END_SRC
**** FOR-WHILE-DO
#+BEGIN_SRC simula
BEGIN
  INTEGER X, ACC;

  X := 0;
  ACC := 0;
  FOR X := X + 1 WHILE X < 11 DO
  BEGIN
    ACC := ACC + X;
    OUTINT(ACC, 0);
    OUTIMAGE;
  END;

END;
#+END_SRC
**** WHILE-DO
#+BEGIN_SRC simula
BEGIN
  INTEGER X, ACC;

  X := 0;
  ACC := 0;

  WHILE X < 11 DO
  BEGIN
    ACC := ACC + X;
    X := X + 1;
    OUTINT(ACC, 0);
    OUTIMAGE;
  END;

END;
#+END_SRC
*** Procedimentos
**** Máximo divisor comum
Em Simula, funções são chamadas de procedimentos. Segue a implementação do algoritmo de Euclides.
#+BEGIN_SRC simula
BEGIN
  INTEGER RES;

  INTEGER PROCEDURE GCD(A, B);
  INTEGER A, B; COMMENT AQUI VAO OS PARAMETROS;
  BEGIN
    INTEGER TEMP; COMMENT VARIAVEIS AUXILIARES;

    WHILE B > 0 DO
    BEGIN
      TEMP := B;
      B := MOD(A, B);
      A := TEMP;
    END;

    GCD := A; COMMENT RETORNO DO PROCEDIMENTO;
  END;

  RES := GCD(15, 4);
  
  OUTINT(RES, 0);
  OUTIMAGE;
END;
#+END_SRC
** Orientação a objetos
*** Classes
**** Ponto cartesiano
Criamos uma classe para pontos cartesianos, pois acreditamos seja um ótimo exemplo inicial.
#+BEGIN_SRC simula
BEGIN
  COMMENT REFERENCIA PARA UM OBJETO DO TIPO POINT;
  REF(POINT) P;

  COMMENT DEFINICAO DA CLASSE POINT;
  CLASS POINT;
  BEGIN
    REAL X, Y;
  END;

  COMMENT CRIACAO DE UMA INSTACIA DE PONTO;
  P :- NEW POINT;

  COMMENT ACESSO AOS ATRIBUTOS DA CLASSE;
  P.X := 1;
  P.Y := 2;

  OUTINT(P.X, 0);
  OUTIMAGE;
  OUTINT(P.Y, 0);
  OUTIMAGE;
END;
#+END_SRC
**** Construtores?
Um problema do exemplo anterior é a inconveniência ao inicializar a classe: primeiro instanciamo-la, e só depois atribuímos valores aos seus atributos. Podemos contornar esse problema mudando um pouco a definição.
#+BEGIN_SRC simula
BEGIN
  REF(POINT) P;

  CLASS POINT(X, Y);
  REAL X, Y;
  BEGIN
    COMMENT EM VEZ DE CRIAR UM BLOCO VAZIO, PODEMOS USAR UM PONTO E VIRGULA;
  END;

  COMMENT PERCEBA O USO DE :- EM VEZ DE :=;
  P :- NEW POINT(1, 2);

  OUTINT(P.X, 0);
  OUTIMAGE;
  OUTINT(P.Y, 0);
  OUTIMAGE;
END;
#+END_SRC
**** Métodos? Que tal uma lista encadeada?
A implementação que segue é bastante simples. A lista não é ordenada, e a classe possui dois metódos: o INSERT, que insere um ID no final da lista, e o PRINT, que imprime a lista e retorna a contagem de nós.
#+BEGIN_SRC simula
BEGIN
  REF(LINKED_LIST) LIST;
  INTEGER N;

  CLASS NODE(ID);
  INTEGER ID;
  BEGIN
    REF(NODE) NEXT;
  END;

  CLASS LINKED_LIST;
  BEGIN
    REF(NODE) FIRST;
    
    INTEGER PROCEDURE INSERT(ID);
    INTEGER ID;
    BEGIN
      REF(NODE) N;
      
      IF FIRST =/= NONE THEN 
        BEGIN
          N :- FIRST;
          WHILE N.NEXT =/= NONE DO N :- N.NEXT;
          N.NEXT :- NEW NODE(ID);
        END 
      ELSE 
        BEGIN
          FIRST :- NEW NODE(ID);
        END;

      INSERT := ID;

    END;
    
    INTEGER PROCEDURE PRINT;
    BEGIN
      INTEGER COUNT;
      REF(NODE) N;
      
      N :- FIRST;      

      WHILE N =/= NONE DO
        BEGIN
          OUTINT(N.ID, 0);
          OUTIMAGE;
          N :- N.NEXT;
          COUNT := COUNT + 1;
        END;     
   
      PRINT := COUNT;

    END;
    END;

  LIST :- NEW LINKED_LIST;

  LIST.INSERT(10);
  LIST.INSERT(20);
  LIST.INSERT(30);
  
  N := LIST.PRINT;
  
  OUTINT(N, 0);
  OUTIMAGE;

END;
#+END_SRC
*** Herança
**** Ponto no espaço
Para exemplificar o conceito de herança em Simula, decidimos definir uma classe para pontos no espaço. Esses pontos podem ser vistos como um ponto no plano mais outra coordenada.
#+BEGIN_SRC simula
BEGIN
  REF(POINT2) P2;
  REF(POINT3) P3;

  CLASS POINT2(X, Y);
  REAL X, Y;
  BEGIN
  END;

  COMMENT PARA DECLARAR UMA SUBCLASSE, 
          POMOS O NOME DA CLASSE MAE ANTES DA DECLARACAO;
  POINT2 CLASS POINT3(Z);
  REAL Z;
  BEGIN
  END;

  COMMENT TEMOS QUE PASSAR TODOS OS PARAMETROS 
          SEGUNDO A ORDEM DE HERANÇA;
  P3 :- NEW POINT3(1, 2, 3);

  OUTREAL(P3.X, 6, 20);
  OUTIMAGE;
  OUTREAL(P3.Y, 6, 20);
  OUTIMAGE;
  OUTREAL(P3.Z, 6, 20);
  OUTIMAGE;
END;
#+END_SRC
** Conclusões
Percebemos que Simula foi, de fato, muito influente não só conceitualmente, mas também sintaticamente: acessamos atributos de um objeto através de um ponto final, instanciamos objetos através de NEW e definimos classes com um CLASS. Um aspecto muito interessante da linguagem é a forma como declaramos variáveis de classe. Escrevemos REF(NOME_DA_CLASSE), que são como ponteiros. Em Java, por exemplo, esse detalhe fica escondido.

** SmallTalk - A linguagem
*** Noções preliminares
**** Em SmallTalk, as funções não são chamadas, o que ocorre são mensagens que são enviadas aos objetos.
O sinal “ ^ ” é usado para indicar o retorno;

#+BEGIN_SRC smalltalk
"Printando uma mensagem na tela:"
Transcript show: 'Hello, world!'. 

"Declarando variavel"
| x |

"Atribuindo valor a uma variavel"
| x |
x _ 9.

"Somando valores"
| x |
x := 6 + 3.       

"converter uma variavel"
| x |
x := 3.99 asInteger.    

"Verificando se uma variável é positiva"
| b x |
x _ 9.
b := x positive.

"AND"
| b |
b := (x < 5) & (y > 1). 

"OR"
| b |
b := (x < 5) | (y > 1).   

"between"
b := 5 between: 3 and: 12.             
#+END_SRC

*** Estruturas condicionais
#+BEGIN_SRC smalltalk
"IF"
| x |
x := 2 sqrt.
x > 10 ifTrue: [Transcript show: 'Falso!'; cr].     
x > 10 ifFalse: [Transcript show: 'Verdadeiro'; cr].
#+END_SRC

*** Estruturas de repetição
#+BEGIN_SRC smalltalk
"Laco For:"

| x y |
x := 8. y := 1.
1 to: x do: [:a | y := y * 2].          

"While true"
| x y |
x := 8. y := 1.
[x > 0] whileTrue: [x := x - 1. y := y * 2]. 
#+END_SRC

*** Orientação a objetos:
#+BEGIN_SRC smalltalk
Object subclass: ContaBancaria [
    | saldo |
    <comment: 'Respresentacao de uma Conta bancaria'>
    
    ContaBancaria class >> new [
        <category: 'construtor'>
        | r |
        r := super new.
        r inicializa.
        ^r
    ]
    
    inicializa [
        <category: 'Inicializa o atributo saldo'>
        saldo := 0
    ]
    
    saque: quantidade [
        <category: 'Sacando dinheiro'>
        saldo := saldo - quantidade
    ]
    deposito: quantidade [
        <category: 'Depositando dinheiro'>
        saldo := saldo + quantidade
    ]
    informacoes [
        <category: 'Informa a situacao da conta'>
        Transcript show: 'Saldo da conta: '.
        Transcript show: (saldo asString)
    ]
]

conta := ContaBancaria new.
conta deposito: 50.
conta deposito: 20.
conta saque: 10.
conta informacoes 
#+END_SRC

** Como executar os códigos
Tivemos dificuldades para baixar um compilador Simula, e acabamos usando o [[https://www.tutorialspoint.com/compile_simula_online.php][Compilador do Tutorials Point]].

Compilador online SmallTalk: [[https://www.tutorialspoint.com/execute_smalltalk_online.php#:~:text=2.5)-,Online%20Smalltalk%20Compiler%20(GNU%20Smalltalk%20v3.,2.5.][Compilador do Tutorials Point]].

** Referências
Introduction to SIMULA 67 de Günther Lamprecht.

[[https://en.wikipedia.org/wiki/Simula][A página da Wikipédia para Simula]].

[[https://web.archive.org/web/20040919031218/http://www.macs.hw.ac.uk/~rjp/bookhtml/][An Introduction to Programming in Simula]].

[[https://www.youtube.com/watch?v=K3W56e9j4UY&t][Entrevista de Bjarne Stroustrup sobre a origem de C++]].

[[https://pt.wikipedia.org/wiki/Smalltalk][Wikipedia Smalltalk]].

[[https://learnxinyminutes.com/docs/smalltalk/][Learn Smalltalk in Y minutes]].
